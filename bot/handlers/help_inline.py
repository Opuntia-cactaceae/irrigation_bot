# bot/handlers/help_inline.py
from __future__ import annotations

from aiogram import Router, F, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.keyboards.main_menu import MENU_PREFIX

help_router = Router(name="help_inline")

PREFIX = "help"
CB_MENU_ROOT = f"{MENU_PREFIX}:root"


# ---------- keyboards ----------
def kb_help_root() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üìñ FAQ", callback_data=f"{PREFIX}:faq")
    kb.button(text="‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ", callback_data=f"{PREFIX}:about")
    kb.button(text="‚Ü©Ô∏è –í –º–µ–Ω—é", callback_data=CB_MENU_ROOT)
    kb.adjust(1)
    return kb.as_markup()


def kb_help_back() -> types.InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"{PREFIX}:root")
    return kb.as_markup()


# ---------- main content ----------
HELP_ROOT_TEXT = (
    "‚ùì <b>–ü–æ–º–æ—â—å</b>\n\n"
    "üíß –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –ø–æ–ª–∏–≤–∞, —É–¥–æ–±—Ä–µ–Ω–∏–π –∏ –ø–µ—Ä–µ—Å–∞–¥–∫–∏.\n"
    "üìÖ –í –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã.\n"
    "‚úÖ –ß–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ¬ª —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è ‚Äî "
    "–∏ –±–æ—Ç –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ:\n"
    "‚Ä¢ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
    "‚Ä¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á—É–∂–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é ‚¨áÔ∏è"
)

HELP_FAQ_TEXT = (
    "üìñ <b>FAQ</b>\n\n"
    "‚Ä¢ <b>–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—Ö–æ–¥—è—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?</b>\n"
    "  –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –Ω–µ –≤ –º—É—Ç–µ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ.\n\n"
    "‚Ä¢ <b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —á–∞—Å—Ç–æ—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π?</b>\n"
    "  –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Üí ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª ‚Üí –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª.\n\n"
    "‚Ä¢ <b>–ú–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º?</b>\n"
    "  –î–∞, —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è¬ª ‚Äî –¥—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è.\n"
)

HELP_ABOUT_TEXT = (
    "‚ÑπÔ∏è <b>–û –ø—Ä–æ–µ–∫—Ç–µ</b>\n\n"
    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —É—Ö–æ–¥ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ üå±.\n"
    "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ—Ç–º–µ—á–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏.\n\n"
    "–ö–æ–∑–∞—Ä–∞ (aka –ö–æ—Å–∞—Ä–∞) ‚ÄîÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª—å –ó–∞ –†–∞—Å—Ç–µ–Ω–∏—è–º–∏"
)


# ---------- public API ----------
async def show_help(target: types.Message | types.CallbackQuery):
    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(HELP_ROOT_TEXT, reply_markup=kb_help_root())
        return await target.answer()
    else:
        return await target.answer(HELP_ROOT_TEXT, reply_markup=kb_help_root())


# ---------- callbacks ----------
@help_router.callback_query(F.data.startswith(f"{PREFIX}:"))
async def on_help_callbacks(cb: types.CallbackQuery):
    parts = cb.data.split(":")
    action = parts[1] if len(parts) > 1 else "root"

    if action == "root":
        await cb.message.edit_text(HELP_ROOT_TEXT, reply_markup=kb_help_root())
    elif action == "faq":
        await cb.message.edit_text(HELP_FAQ_TEXT, reply_markup=kb_help_back())
    elif action == "about":
        await cb.message.edit_text(HELP_ABOUT_TEXT, reply_markup=kb_help_back())
    else:
        await cb.answer()  # fallback


# ---------- command /help ----------
@help_router.message(Command("help"))
async def cmd_help(msg: types.Message):
    await msg.answer(HELP_ROOT_TEXT, reply_markup=kb_help_root())