# bot/handlers/calendar_inline.py
from __future__ import annotations
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timezone
from typing import Optional, Literal
from aiogram.fsm.context import FSMContext
from bot.handlers.schedule_inline import show_schedule_wizard
from bot.db_repo.models import ActionType
from bot.services.calendar_feed import get_feed, Mode  # Mode = Literal["upc","hist"]
from bot.db_repo.unit_of_work import new_uow
calendar_router = Router(name="calendar_inline")

PREFIX = "cal"

# –∫–æ—Ä–æ—Ç–∫–∏–µ –∫–æ–¥—ã –¥–ª—è action
ACT_MAP: dict[str, Optional[ActionType]] = {
    "all": None,
    "w": ActionType.WATERING,
    "f": ActionType.FERTILIZING,
    "r": ActionType.REPOTTING,
}
ACT_TO_EMOJI = {
    ActionType.WATERING: "üíß",
    ActionType.FERTILIZING: "üíä",
    ActionType.REPOTTING: "ü™¥",
}
ACT_TO_CODE: dict[Optional[ActionType], str] = {
    None: "all",
    ActionType.WATERING: "w",
    ActionType.FERTILIZING: "f",
    ActionType.REPOTTING: "r",
}

PAGE_SIZE_DAYS = 5  # —Å–∫–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥–Ω–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ


# ====== –ü–£–ë–õ–ò–ß–ù–´–ô –í–•–û–î –ò–ó –ú–ï–ù–Æ ======
async def show_calendar_root(
    target: types.Message | types.CallbackQuery,
    year: int,  # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º UX, –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    month: int, # –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ç–µ–∫—É—â–µ–º UX, –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    action: Optional[ActionType] = None,
    plant_id: Optional[int] = None,
    mode: Mode = "upc",
    page: int = 1,
):
    """–ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è: —Ñ–∏–ª—å—Ç—Ä—ã + –ª–µ–Ω—Ç–∞."""
    if isinstance(target, types.CallbackQuery):
        message = target.message
        user_id = target.from_user.id
    else:
        message = target
        user_id = target.from_user.id

    # —Ä–µ–∞–ª—å–Ω–∞—è –ª–µ–Ω—Ç–∞
    feed_page = await get_feed(
        user_tg_id=user_id,
        action=action,
        plant_id=plant_id,
        mode=mode,
        page=page,
        days_per_page=PAGE_SIZE_DAYS,
    )

    header = _render_header(mode, action, plant_id)
    body = _render_feed_text(feed_page, action)
    kb = _kb_calendar(mode, feed_page.page, feed_page.pages, action, plant_id)

    text = header + "\n" + body
    if isinstance(target, types.CallbackQuery):
        await message.edit_text(text, reply_markup=kb)
        await target.answer()
    else:
        await message.answer(text, reply_markup=kb)


# ====== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======
def _kb_calendar(
    mode: Mode,
    page: int,
    pages: int,
    action: Optional[ActionType],
    plant_id: Optional[int],
):
    kb = InlineKeyboardBuilder()

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –¥–µ–π—Å—Ç–≤–∏—è
    row_actions = [("üíß", "w"), ("üíä", "f"), ("ü™¥", "r"), ("üëÄ", "all")]
    for text, code in row_actions:
        active = (ACT_TO_CODE.get(action) == code)
        mark = "‚úì " if active and code != "all" else ""
        kb.button(
            text=f"{mark}{text}",
            callback_data=f"{PREFIX}:act:{mode}:{page}:{code}:{plant_id or 0}",
        )
    kb.adjust(4)

    # —Ç–∞–±—ã: –±–ª–∏–∂–∞–π—à–∏–µ / –∏—Å—Ç–æ—Ä–∏—è
    upc_active = (mode == "upc")
    hist_active = (mode == "hist")
    kb.row(
        types.InlineKeyboardButton(
            text=("üìå –ë–ª–∏–∂–∞–π—à–∏–µ ‚úì" if upc_active else "üìå –ë–ª–∏–∂–∞–π—à–∏–µ"),
            callback_data=f"{PREFIX}:feed:upc:1:{ACT_TO_CODE.get(action)}:{plant_id or 0}",
        ),
        types.InlineKeyboardButton(
            text=("üìú –ò—Å—Ç–æ—Ä–∏—è ‚úì" if hist_active else "üìú –ò—Å—Ç–æ—Ä–∏—è"),
            callback_data=f"{PREFIX}:feed:hist:1:{ACT_TO_CODE.get(action)}:{plant_id or 0}",
        ),
    )

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    kb.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è",
            callback_data=f"{PREFIX}:page:{mode}:{max(1, page-1)}:{ACT_TO_CODE.get(action)}:{plant_id or 0}",
        ),
        types.InlineKeyboardButton(
            text=f"–°—Ç—Ä. {page}/{pages}", callback_data=f"{PREFIX}:noop"
        ),
        types.InlineKeyboardButton(
            text="‚ñ∂Ô∏è",
            callback_data=f"{PREFIX}:page:{mode}:{min(pages, page+1)}:{ACT_TO_CODE.get(action)}:{plant_id or 0}",
        ),
    )

    # –¥–µ–π—Å—Ç–≤–∏—è
    kb.row(
        types.InlineKeyboardButton(
            text="üóìÔ∏è –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
            callback_data=f"{PREFIX}:plan:{mode}:{page}:{ACT_TO_CODE.get(action)}:{plant_id or 0}",
        ),
    )
    kb.row(
        types.InlineKeyboardButton(text="üåø –†–∞—Å—Ç–µ–Ω–∏—è", callback_data="plants:page:1:0"),
        types.InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é", callback_data="menu:root"),
    )

    return kb.as_markup()


# ====== –†–ï–ù–î–ï–† –¢–ï–ö–°–¢–ê ======
def _render_header(
    mode: Mode, action: Optional[ActionType], plant_id: Optional[int]
) -> str:
    act_label = {
        None: "–í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è",
        ActionType.WATERING: "–ü–æ–ª–∏–≤",
        ActionType.FERTILIZING: "–£–¥–æ–±—Ä–µ–Ω–∏—è",
        ActionType.REPOTTING: "–ü–µ—Ä–µ—Å–∞–¥–∫–∞",
    }[action]
    mode_label = "–ë–ª–∏–∂–∞–π—à–∏–µ" if mode == "upc" else "–ò—Å—Ç–æ—Ä–∏—è"
    plant_label = "–í—Å–µ —Ä–∞—Å—Ç–µ–Ω–∏—è" if not plant_id else f"–†–∞—Å—Ç–µ–Ω–∏–µ #{plant_id}"
    return (
        f"üìÖ <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å</b>\n"
        f"–§–∏–ª—å—Ç—Ä: <b>{act_label}</b> ¬∑ <i>{plant_label}</i>\n"
        f"–†–∞–∑–¥–µ–ª: <b>{mode_label}</b>"
    )


def _render_feed_text(feed_page, action: Optional[ActionType]) -> str:
    """–†–µ–Ω–¥–µ—Ä–∏—Ç FeedPage –∏–∑ calendar_feed.get_feed."""
    if not feed_page.days:
        return "–ü–æ–∫–∞ –ø—É—Å—Ç–æ."

    lines: list[str] = []
    for day in feed_page.days:
        d = day.date_local
        lines.append(f"\nüìÖ <b>{d:%d.%m (%a)}</b>")
        for it in day.items:
            emoji = ACT_TO_EMOJI.get(it.action, "‚Ä¢")
            local_time = it.dt_utc.astimezone(timezone.utc).strftime("%H:%M")  # –≤—Ä–µ–º—è –≤ UTC; –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ª–æ–∫–∞–ª—å–Ω–æ–µ ‚Äî –ø–æ–¥–∞–≤–∞–π –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
            lines.append(f"  {local_time} {emoji} {it.plant_name} (id:{it.plant_id})")
    return "\n".join(lines).lstrip()


@calendar_router.callback_query(F.data.startswith(f"{PREFIX}:"))
async def on_calendar_callbacks(cb: types.CallbackQuery, state: FSMContext):
    parts = cb.data.split(":")
    # cal:<cmd>:<mode>:<page>:<act>:<pid>[:...]
    cmd = parts[1] if len(parts) > 1 else "noop"

    if cmd == "noop":
        return await cb.answer()

    if cmd in ("root", "feed", "page", "act"):
        mode: Mode = (parts[2] if len(parts) > 2 else "upc")  # upc|hist
        page = int(parts[3]) if len(parts) > 3 else 1
        act_code = parts[4] if len(parts) > 4 else "all"
        pid = int(parts[5]) if len(parts) > 5 else 0

        action = ACT_MAP.get(act_code, None)
        plant_id = pid or None

        return await show_calendar_root(
            cb,
            year=datetime.now().year,
            month=datetime.now().month,
            action=action,
            plant_id=plant_id,
            mode=mode,
            page=page,
        )

    if cmd == "plan":
        # –∑–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        return await show_schedule_wizard(cb, state)

    if cmd == "done":
        # –§–æ—Ä–º–∞—Ç: cal:done:<mode>:<page>:<act>:<pid>:<schedule_id>
        try:
            mode: Mode = parts[2]
            page = int(parts[3])
            act_code = parts[4]
            pid = int(parts[5])
            schedule_id = int(parts[6])
        except Exception:
            return await cb.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å", show_alert=True)

        action = ACT_MAP.get(act_code, None)
        plant_id = pid or None

        async with new_uow() as uow:
            sch = await uow.schedules.get(schedule_id)
            if not sch or not sch.active:
                await cb.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ", show_alert=True)
                return await show_calendar_root(
                    cb,
                    year=datetime.now().year,
                    month=datetime.now().month,
                    action=action,
                    plant_id=plant_id,
                    mode=mode,
                    page=page,
                )

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
            if sch.plant.user.tg_user_id != cb.from_user.id:
                await cb.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
                return

            # —Å–æ–∑–¥–∞—ë–º —Å–æ–±—ã—Ç–∏–µ
            await uow.events.create(
                plant_id=sch.plant.id,
                action=sch.action,
                source="manual",
            )
            # commit –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        # –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
        from bot.scheduler import plan_next_for_schedule
        await plan_next_for_schedule(cb.bot, schedule_id)

        await cb.answer("–û—Ç–º–µ—á–µ–Ω–æ ‚úÖ", show_alert=False)

        return await show_calendar_root(
            cb,
            year=datetime.now().year,
            month=datetime.now().month,
            action=action,
            plant_id=plant_id,
            mode=mode,
            page=page,
        )

    # fallback
    await cb.answer()