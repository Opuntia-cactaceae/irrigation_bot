# bot/handlers/plants_inline.py
from __future__ import annotations
from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_repo.unit_of_work import new_uow

plants_router = Router(name="plants_inline")

PREFIX = "plants"
PAGE_SIZE = 10


# --- FSM ---
class AddPlantStates(StatesGroup):
    waiting_name = State()
    waiting_species_mode = State()
    waiting_species_text = State()


# --- helpers ---
def _slice(items: list, page: int, size: int = PAGE_SIZE):
    total = len(items)
    pages = max(1, (total + size - 1) // size)
    page = max(1, min(page, pages))
    s, e = (page - 1) * size, (page - 1) * size + size
    return items[s:e], page, pages, total


async def _get_user(user_tg_id: int):
    async with new_uow() as uow:
        return await uow.users.get_or_create(user_tg_id)


async def _get_plants_with_filter(user_id: int, species_id: int | None):
    async with new_uow() as uow:
        plants = await uow.plants.list_by_user(user_id)
        if species_id:
            plants = [p for p in plants if p.species_id == species_id]
        return list(plants)


async def _get_species(user_id: int):
    async with new_uow() as uow:
        return list(await uow.species.list_by_user(user_id))


# --- keyboards ---
def kb_plants_list(page: int, pages: int, species_id: int | None):
    kb = InlineKeyboardBuilder()
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    kb.button(text="‚óÄÔ∏è", callback_data=f"{PREFIX}:page:{max(1, page - 1)}:{species_id or 0}")
    kb.button(text=f"–°—Ç—Ä. {page}/{pages}", callback_data=f"{PREFIX}:noop")
    kb.button(text="‚ñ∂Ô∏è", callback_data=f"{PREFIX}:page:{min(pages, page + 1)}:{species_id or 0}")
    kb.row(
        types.InlineKeyboardButton(text="üß¨ –§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É", callback_data=f"{PREFIX}:filter_species:{species_id or 0}")
    )
    kb.row(
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ", callback_data=f"{PREFIX}:add"),
        types.InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é", callback_data="menu:root"),
    )
    return kb.as_markup()


def kb_species_list(species, selected_id: int | None, page: int = 1, page_size: int = 10):
    items, page, pages, _ = _slice(species, page, page_size)
    kb = InlineKeyboardBuilder()
    # ¬´–í—Å–µ –≤–∏–¥—ã¬ª
    mark = "‚úì " if not selected_id else ""
    kb.button(text=f"{mark}–í—Å–µ –≤–∏–¥—ã", callback_data=f"{PREFIX}:set_species:0:{page}")
    for s in items:
        mark = "‚úì " if (selected_id == s.id) else ""
        kb.button(text=f"{mark}{s.name}", callback_data=f"{PREFIX}:set_species:{s.id}:{page}")
    kb.adjust(2)
    # –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    kb.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è",
                                   callback_data=f"{PREFIX}:species_page:{max(1, page - 1)}:{selected_id or 0}"),
        types.InlineKeyboardButton(text=f"–°—Ç—Ä. {page}/{pages}", callback_data=f"{PREFIX}:noop"),
        types.InlineKeyboardButton(text="‚ñ∂Ô∏è",
                                   callback_data=f"{PREFIX}:species_page:{min(pages, page + 1)}:{selected_id or 0}"),
    )
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–∞
    kb.row(
        types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥ (—Ç–µ–∫—Å—Ç–æ–º)", callback_data=f"{PREFIX}:species_add_text"),
        types.InlineKeyboardButton(text="‚Ü©Ô∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"{PREFIX}:back_to_list:1"),
    )
    return kb.as_markup()


def kb_add_species_mode():
    kb = InlineKeyboardBuilder()
    kb.button(text="üß¨ –í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞", callback_data=f"{PREFIX}:species_pick_list")
    kb.button(text="‚úçÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ–π –≤–∏–¥", callback_data=f"{PREFIX}:species_add_text")
    kb.adjust(1)
    return kb.as_markup()


# --- public API ---
async def show_plants_list(target: types.Message | types.CallbackQuery, page: int = 1, species_id: int | None = None):
    if isinstance(target, types.CallbackQuery):
        user_id = target.from_user.id
        message = target.message
    else:
        user_id = target.from_user.id
        message = target

    user = await _get_user(user_id)
    plants = await _get_plants_with_filter(user.id, species_id)
    page_items, page, pages, total = _slice(plants, page)

    header = "üåø <b>–†–∞—Å—Ç–µ–Ω–∏—è</b>"
    sub = f"–í—Å–µ–≥–æ: <b>{total}</b> | –í–∏–¥: <b>{'–í—Å–µ' if not species_id else '‚Ä¶'}</b>"
    text = header + "\n" + sub + "\n\n" + "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π."

    # —Å—Ç—Ä–æ–∏–º —Ç–∞–±–ª–∏—Ü—É-—Å–ø–∏—Å–æ–∫
    lines = []
    if page_items:
        for p in page_items:
            sp = f" ¬∑ {p.species.name}" if getattr(p, "species", None) else ""
            lines.append(f"‚Ä¢ {p.name}{sp} (id:{p.id})")
    else:
        lines.append("(–∑–¥–µ—Å—å –ø—É—Å—Ç–æ)")

    kb = kb_plants_list(page, pages, species_id)
    if isinstance(target, types.CallbackQuery):
        await message.edit_text(text + "\n" + "\n".join(lines), reply_markup=kb)
        await target.answer()
    else:
        await message.answer(text + "\n" + "\n".join(lines), reply_markup=kb)


# --- callbacks ---
@plants_router.callback_query(F.data.startswith(f"{PREFIX}:"))
async def on_plants_callbacks(cb: types.CallbackQuery, state: FSMContext):
    parts = cb.data.split(":")
    action = parts[1] if len(parts) > 1 else "noop"

    if action == "noop":
        return await cb.answer()

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞: plants:page:<page>:<species_id>
    if action == "page":
        page = int(parts[2]);
        species_id = int(parts[3]) or None
        return await show_plants_list(cb, page=page, species_id=species_id)

    # —Ñ–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥—É ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–æ–≤
    if action == "filter_species":
        species_id = int(parts[2]) or None
        user = await _get_user(cb.from_user.id)
        species = await _get_species(user.id)
        text = "üß¨ <b>–§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥–∞–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π."
        return await cb.message.edit_text(text, reply_markup=kb_species_list(species, species_id, page=1))

    # –ª–∏—Å—Ç–∞—Ç—å –≤–∏–¥—ã: plants:species_page:<page>:<selected_id>
    if action == "species_page":
        page = int(parts[2]);
        selected = int(parts[3]) or None
        user = await _get_user(cb.from_user.id)
        species = await _get_species(user.id)
        text = "üß¨ <b>–§–∏–ª—å—Ç—Ä –ø–æ –≤–∏–¥–∞–º</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π."
        return await cb.message.edit_text(text, reply_markup=kb_species_list(species, selected, page=page))

    # —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–∏–¥ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É
    if action == "set_species":
        species_id = int(parts[2]) or None
        # –≤–µ—Ä–Ω—ë–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        return await show_plants_list(cb, page=1, species_id=species_id)

    # –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ ‚Äî —Å—Ç–∞—Ä—Ç FSM: —Å–ø—Ä–æ—Å–∏–º –∏–º—è
    if action == "add":
        await state.set_state(AddPlantStates.waiting_name)
        await cb.message.edit_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Ä–∞—Å—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Å–≤–æ–±–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç).\n\n"
            "‚Ü©Ô∏è –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardBuilder().button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞",
                                                        callback_data=f"{PREFIX}:back_to_list:1").as_markup()
        )
        return await cb.answer()

    # –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ –≤–∏–¥–∞
    if action == "species_pick_list":
        await state.set_state(AddPlantStates.waiting_species_mode)  # –æ—Å—Ç–∞—ë–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        user = await _get_user(cb.from_user.id)
        species = await _get_species(user.id)
        await cb.message.edit_text(
            "üß¨ –í—ã–±–µ—Ä–∏—Ç–µ <b>–≤–∏–¥</b> –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π.",
            reply_markup=kb_species_list(species, selected_id=None, page=1)
        )
        return await cb.answer()

    if action == "species_add_text":
        await state.set_state(AddPlantStates.waiting_species_text)
        await cb.message.edit_text(
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>–≤–∏–¥–∞</b> —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            "‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞ ‚Äî –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardBuilder().button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞",
                                                        callback_data=f"{PREFIX}:back_to_list:1").as_markup()
        )
        return await cb.answer()

    if action == "species_skip":
        # –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –±–µ–∑ –≤–∏–¥–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–Ω–µ–µ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è
        data = await state.get_data()
        plant_name = data.get("new_plant_name")
        if not plant_name:
            await cb.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è", show_alert=False)
            return
        async with new_uow() as uow:
            user = await uow.users.get_or_create(cb.from_user.id)
            await uow.plants.create(user_id=user.id, name=plant_name)
        await state.clear()
        await cb.answer("–°–æ–∑–¥–∞–Ω–æ ‚úÖ", show_alert=False)
        return await show_plants_list(cb, page=1, species_id=None)

    if action == "back_to_list":
        await state.clear()
        page = int(parts[2]) if len(parts) > 2 else 1
        return await show_plants_list(cb, page=page, species_id=None)

    # fallback
    await cb.answer()


# --- message handlers (FSM –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞) ---

@plants_router.message(AddPlantStates.waiting_name)
async def input_plant_name(m: types.Message, state: FSMContext):
    name = (m.text or "").strip()
    if not name:
        return await m.answer("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
    # —Å–æ—Ö—Ä–∞–Ω–∏–º –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º —Ä–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ –≤–∏–¥–∞
    await state.update_data(new_plant_name=name)
    await state.set_state(AddPlantStates.waiting_species_mode)
    kb = kb_add_species_mode()
    await m.answer(f"–û–∫, –∏–º—è: <b>{name}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —É–∫–∞–∑–∞—Ç—å –≤–∏–¥:", reply_markup=kb)


@plants_router.message(AddPlantStates.waiting_species_text)
async def input_species_text(m: types.Message, state: FSMContext):
    species_name = (m.text or "").strip()
    if not species_name:
        return await m.answer("–í–∏–¥ –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.")
    data = await state.get_data()
    plant_name = data.get("new_plant_name")
    if not plant_name:
        await state.clear()
        return await m.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —á–µ—Ä–µ–∑ ¬´–†–∞—Å—Ç–µ–Ω–∏—è¬ª.")
    # —Å–æ–∑–¥–∞—ë–º/–±–µ—Ä—ë–º –≤–∏–¥ –∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ
    async with new_uow() as uow:
        user = await uow.users.get_or_create(m.from_user.id)
        sp = await uow.species.get_or_create(user_id=user.id, name=species_name)
        await uow.plants.create(user_id=user.id, name=plant_name)
        # –ü—Ä–∏—Å–≤–æ–∏—Ç—å –≤–∏–¥ –Ω–æ–≤–æ–º—É —Ä–∞—Å—Ç–µ–Ω–∏—é: –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å create(), —á—Ç–æ–±—ã –ø—Ä–∏–Ω–∏–º–∞–ª species_id.
        # –ë—ã—Å—Ç—Ä—ã–π —Ñ–∏–∫—Å: –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç ‚Äî –ª—É—á—à–µ –ø–æ–º–µ–Ω—è—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    await state.clear()
    await m.answer(f"–°–æ–∑–¥–∞–Ω–æ: <b>{plant_name}</b> ({species_name}) ‚úÖ")
    # –≤–µ—Ä–Ω—ë–º —Å–ø–∏—Å–æ–∫
    await show_plants_list(m, page=1, species_id=None)