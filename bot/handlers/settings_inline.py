# bot/handlers/settings_inline.py
from __future__ import annotations

from typing import List, Tuple

from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_repo.unit_of_work import new_uow
from bot.db_repo.models import Schedule, Plant, User, ActionType
from bot.db_repo.schedules import SchedulesRepo
from bot.db_repo.schedule_shares import ScheduleShareRepo
from bot.db_repo.schedule_subscriptions import ScheduleSubscriptionsRepo

settings_router = Router(name="settings_inline")

PREFIX = "settings"
PAGE_SIZE = 7


# ---------- FSM ----------
class SettingsStates(StatesGroup):
    waiting_sub_code = State()


# ---------- Utils ----------
def _slice(items: list, page: int, size: int = PAGE_SIZE):
    total = len(items)
    pages = max(1, (total + size - 1) // size)
    page = max(1, min(page, pages))
    s, e = (page - 1) * size, (page - 1) * size + size
    return items[s:e], page, pages, total


def _weekly_mask_to_text(mask: int) -> str:
    days = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
    picked = [d for i, d in enumerate(days) if (mask >> i) & 1]
    return ",".join(picked) if picked else "‚Äî"


def _action_emoji(action: ActionType | str) -> str:
    val = action if isinstance(action, str) else action.value
    return {"watering": "üíß", "fertilizing": "üß™", "repotting": "ü™¥", "custom": "üîñ"}.get(val, "üîî")


async def _get_or_create_user_by_tg(tg_id: int) -> User:
    async with new_uow() as uow:
        return await uow.users.get_or_create(tg_id)


# ---------- Public entry ----------
async def show_settings_menu(target: types.CallbackQuery | types.Message):
    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º", callback_data=f"{PREFIX}:share_menu:1"))
    kb.row(types.InlineKeyboardButton(text="üß© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –ø–æ –∫–æ–¥—É", callback_data=f"{PREFIX}:sub_prompt"))
    kb.row(types.InlineKeyboardButton(text="üìú –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data=f"{PREFIX}:subs_list:1"))
    kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é", callback_data="menu:root"))

    text = "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if isinstance(target, types.CallbackQuery):
        await target.message.edit_text(text, reply_markup=kb.as_markup())
        await target.answer()
    else:
        await target.answer(text, reply_markup=kb.as_markup())


# ---------- SHARE: —Å–ø–∏—Å–æ–∫ –º–æ–∏—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π ----------
@settings_router.callback_query(F.data.startswith(f"{PREFIX}:share_menu:")))
async def on_share_menu(cb: types.CallbackQuery):
    # settings:share_menu:<page>
    try:
        page = int(cb.data.split(":")[2])
    except Exception:
        page = 1

    tg_id = cb.from_user.id
    # —Å–æ–±–∏—Ä–∞–µ–º —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏:
    async with new_uow() as uow:
        me = await uow.users.get_or_create(tg_id)
        plants = await uow.plants.list_by_user(me.id)

        # –ø–ª–æ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π —Å –∏–º–µ–Ω–∞–º–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π
        items: List[dict] = []
        for p in plants:
            sch_list = await uow.schedules.list_by_plant(p.id)
            for s in sch_list:
                if not getattr(s, "active", True):
                    continue
                items.append({
                    "schedule": s,
                    "plant": p,
                })

    if not items:
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"{PREFIX}:menu"))
        await cb.message.edit_text("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π.", reply_markup=kb.as_markup())
        return await cb.answer()

    page_items, page, pages, _ = _slice(items, page)

    lines = ["ü´Ç <b>–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º</b>", "–ù–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Ññ‚Ä¶¬ª –Ω–∞–ø—Ä–æ—Ç–∏–≤ –Ω—É–∂–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞.", ""]
    kb = InlineKeyboardBuilder()
    for i, it in enumerate(page_items, start=1):
        s: Schedule = it["schedule"]
        p: Plant = it["plant"]
        t = s.local_time.strftime("%H:%M")
        when = (f"–∫–∞–∂–¥—ã–µ {s.interval_days} –¥–Ω –≤ {t}" if s.type == "interval" else f"{_weekly_mask_to_text(s.weekly_mask or 0)} –≤ {t}")
        custom = f" ‚Äî {s.custom_title}" if s.action == ActionType.CUSTOM and s.custom_title else ""
        lines.append(f"{i}. {p.name}{custom} ¬∑ {when} {_action_emoji(s.action)}")
        kb.row(
            types.InlineKeyboardButton(
                text=f"üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è ‚Ññ{i}", callback_data=f"{PREFIX}:share_make:{s.id}:{page}"
            )
        )

    kb.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{PREFIX}:share_menu:{max(1, page-1)}"),
        types.InlineKeyboardButton(text=f"–°—Ç—Ä. {page}/{pages}", callback_data=f"{PREFIX}:noop"),
        types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{PREFIX}:share_menu:{min(pages, page+1)}"),
    )
    kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"{PREFIX}:menu"))

    await cb.message.edit_text("\n".join(lines), reply_markup=kb.as_markup())
    await cb.answer()


@settings_router.callback_query(F.data.startswith(f"{PREFIX}:share_make:")))
async def on_share_make(cb: types.CallbackQuery):
    # settings:share_make:<schedule_id>:<return_page>
    parts = cb.data.split(":")
    try:
        schedule_id = int(parts[2]); return_page = int(parts[3])
    except Exception:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ–¥", show_alert=True)
        return

    tg_id = cb.from_user.id
    async with new_uow() as uow:
        me = await uow.users.get_or_create(tg_id)
        # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ—ë
        sch = await uow.schedules.get(schedule_id)
        if not sch:
            await cb.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
            return
        plant = await uow.plants.get(sch.plant_id)
        if not plant or plant.user_id != me.id:
            await cb.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: –Ω–µ —Ç–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", show_alert=True)
            return

        share_repo = ScheduleShareRepo(uow.session)
        share = await share_repo.create_share(
            owner_user_id=me.id,
            schedule_id=sch.id,
            note=None,
            allow_complete_by_subscribers=True,
            expires_at_utc=None,
        )
        await uow.commit()

    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"{PREFIX}:share_menu:{return_page}"))
    kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{PREFIX}:menu"))

    text = (
        "‚úÖ –ö–æ–¥ —Å–æ–∑–¥–∞–Ω.\n\n"
        f"<b>–ö–æ–¥:</b> <code>{share.code}</code>\n\n"
        "–ü–µ—Ä–µ–¥–∞–π –∫–æ–¥ ‚Äî –ø–æ –Ω–µ–º—É –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"
        "–ü–æ–¥–ø–∏—Å—á–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–æ–∂–µ—Ç –æ—Ç–º–µ—á–∞—Ç—å ¬´–≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª."
    )
    await cb.message.edit_text(text, reply_markup=kb.as_markup())
    await cb.answer("–ö–æ–¥ –≥–æ—Ç–æ–≤")


# ---------- SUBSCRIBE: –≤–≤–æ–¥ –∫–æ–¥–∞ ----------
@settings_router.callback_query(F.data == f"{PREFIX}:sub_prompt")
async def on_sub_prompt(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(SettingsStates.waiting_sub_code)
    kb = InlineKeyboardBuilder()
    kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"{PREFIX}:menu"))
    await cb.message.edit_text("üß© –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ —á–∞—Ç.", reply_markup=kb.as_markup())
    await cb.answer()


@settings_router.message(SettingsStates.waiting_sub_code, F.text)
async def on_subscribe_enter_code(m: types.Message, state: FSMContext):
    code = (m.text or "").strip().replace(" ", "")
    tg_id = m.from_user.id

    async with new_uow() as uow:
        me = await uow.users.get_or_create(tg_id)
        sub_repo = ScheduleSubscriptionsRepo(uow.session)
        try:
            sub = await sub_repo.subscribe_with_code(subscriber_user_id=me.id, code=code)
            await uow.commit()
        except ValueError as e:
            await m.answer(f"‚ùå {e}")
            return

        # —Ä–µ–Ω–¥–µ—Ä –∏–Ω—Ñ–æ –æ –ø–æ–¥–ø–∏—Å–∫–µ —á–µ—Ä–µ–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
        sch = await uow.schedules.get(sub.schedule_id)
        plant = await uow.plants.get(sch.plant_id) if sch else None

    if sch and plant:
        t = sch.local_time.strftime("%H:%M")
        when = (f"–∫–∞–∂–¥—ã–µ {sch.interval_days} –¥–Ω –≤ {t}"
                if sch.type == "interval"
                else f"{_weekly_mask_to_text(sch.weekly_mask or 0)} –≤ {t}")
        custom = f" ‚Äî {sch.custom_title}" if (sch.action == ActionType.CUSTOM and sch.custom_title) else ""
        await m.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞:\n<b>{plant.name}</b>{custom} ¬∑ {when}")
    else:
        await m.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞.")

    await state.clear()
    await show_settings_menu(m)


# ---------- SUBSCRIPTIONS: —Å–ø–∏—Å–æ–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ ----------
@settings_router.callback_query(F.data.startswith(f"{PREFIX}:subs_list:")))
async def on_subs_list(cb: types.CallbackQuery):
    # settings:subs_list:<page>
    try:
        page = int(cb.data.split(":")[2])
    except Exception:
        page = 1

    tg_id = cb.from_user.id
    async with new_uow() as uow:
        me = await uow.users.get_or_create(tg_id)
        subs_repo = ScheduleSubscriptionsRepo(uow.session)
        subs = list(await subs_repo.list_by_user(me.id))

        # —Å–æ–±–µ—Ä—ë–º –ø–æ–¥–ø–∏—Å–∏: –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –µ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ä–∞—Å—Ç–µ–Ω–∏–µ
        items: List[dict] = []
        for s in subs:
            sch = await uow.schedules.get(s.schedule_id)
            if not sch:
                continue
            plant = await uow.plants.get(sch.plant_id)
            if not plant:
                continue
            items.append({"sub": s, "sch": sch, "plant": plant})

    if not items:
        kb = InlineKeyboardBuilder()
        kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"{PREFIX}:menu"))
        await cb.message.edit_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.", reply_markup=kb.as_markup())
        return await cb.answer()

    page_items, page, pages, _ = _slice(items, page)
    lines = ["üìú <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>", "–ù–∞–∂–º–∏—Ç–µ ¬´–£–¥–∞–ª–∏—Ç—å ‚Ññ‚Ä¶¬ª, —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è.", ""]
    kb = InlineKeyboardBuilder()

    for i, it in enumerate(page_items, start=1):
        s = it["sch"]; p = it["plant"]; sub = it["sub"]
        t = s.local_time.strftime("%H:%M")
        when = (f"–∫–∞–∂–¥—ã–µ {s.interval_days} –¥–Ω –≤ {t}"
                if s.type == "interval"
                else f"{_weekly_mask_to_text(s.weekly_mask or 0)} –≤ {t}")
        custom = f" ‚Äî {s.custom_title}" if (s.action == ActionType.CUSTOM and s.custom_title) else ""
        lines.append(f"{i}. {p.name}{custom} ¬∑ {when}")
        kb.row(types.InlineKeyboardButton(text=f"üóë –£–¥–∞–ª–∏—Ç—å ‚Ññ{i}",
                                          callback_data=f"{PREFIX}:subs_del:{sub.id}:{page}"))

    kb.row(
        types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{PREFIX}:subs_list:{max(1, page-1)}"),
        types.InlineKeyboardButton(text=f"–°—Ç—Ä. {page}/{pages}", callback_data=f"{PREFIX}:noop"),
        types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{PREFIX}:subs_list:{min(pages, page+1)}"),
    )
    kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"{PREFIX}:menu"))

    await cb.message.edit_text("\n".join(lines), reply_markup=kb.as_markup())
    await cb.answer()


@settings_router.callback_query(F.data.startswith(f"{PREFIX}:subs_del:")))
async def on_subs_delete(cb: types.CallbackQuery):
    # settings:subs_del:<subscription_id>:<return_page>
    parts = cb.data.split(":")
    try:
        sub_id = int(parts[2]); return_page = int(parts[3])
    except Exception:
        await cb.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å", show_alert=True)
        return

    tg_id = cb.from_user.id
    async with new_uow() as uow:
        me = await uow.users.get_or_create(tg_id)
        # –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –º–æ—è
        subs_repo = ScheduleSubscriptionsRepo(uow.session)
        sub = await subs_repo.get(sub_id)
        if not sub or sub.subscriber_user_id != me.id:
            await cb.answer("–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ", show_alert=True)
            return
        await subs_repo.delete(sub_id)
        await uow.commit()

    await cb.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    # –≤–µ—Ä–Ω—ë–º—Å—è –Ω–∞ —Ç—É –∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await on_subs_list(
        types.CallbackQuery(id=cb.id, from_user=cb.from_user, chat_instance=cb.chat_instance, message=cb.message,
                            data=f"{PREFIX}:subs_list:{return_page}")
    )


# ---------- –±–∞–∑–æ–≤—ã–µ ----------
@settings_router.callback_query(F.data == f"{PREFIX}:menu")
async def on_settings_menu(cb: types.CallbackQuery):
    await show_settings_menu(cb)

@settings_router.callback_query(F.data == f"{PREFIX}:noop")
async def on_noop(cb: types.CallbackQuery):
    await cb.answer()