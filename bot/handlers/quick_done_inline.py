# bot/handlers/quick_done_inline.py
from __future__ import annotations
from datetime import datetime
from typing import List, Optional

import pytz
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_repo.base import AsyncSessionLocal
from bot.db_repo.models import Schedule, Plant, User, Event, ActionType
from bot.db_repo.unit_of_work import new_uow
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from bot.services.rules import next_by_interval, next_by_weekly
from bot.scheduler import plan_next_for_schedule

router = Router(name="quick_done_inline")
PREFIX = "qdone"

ACTION_EMOJI = {
    ActionType.WATERING: "üíß",
    ActionType.FERTILIZING: "üíä",
    ActionType.REPOTTING: "ü™¥",
}

# ---------- —É—Ç–∏–ª–∏—Ç–∞ —Ä–∞—Å—á—ë—Ç–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é ----------
def _calc_next_run_utc(*, sch: Schedule, user_tz: str, last_event_utc: Optional[datetime], now_utc: datetime) -> datetime:
    if sch.type == "interval":
        return next_by_interval(last_event_utc, sch.interval_days, sch.local_time, user_tz, now_utc)
    else:
        return next_by_weekly(last_event_utc, sch.weekly_mask, sch.local_time, user_tz, now_utc)

# ---------- —Å–±–æ—Ä –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–¥–∞—á –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ----------
async def _collect_upcoming_for_user(user_tg_id: int, limit: int = 15):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π:
    { 'schedule_id', 'dt_utc', 'plant_id', 'plant_name', 'action' }
    –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
    """
    async with AsyncSessionLocal() as session:
        # user + –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å —Å–≤—è–∑—è–º–∏
        q = (
            select(Schedule)
            .join(Schedule.plant)
            .join(Plant.user)
            .where(User.tg_user_id == user_tg_id, Schedule.active.is_(True))
            .options(
                selectinload(Schedule.plant).selectinload(Plant.user),
                selectinload(Schedule.plant).selectinload(Plant.events),
            )
        )
        schedules: List[Schedule] = (await session.execute(q)).scalars().all()

    items = []
    now_utc = datetime.now(pytz.UTC)
    for sch in schedules:
        user = sch.plant.user
        tz = user.tz
        last = max((e.done_at_utc for e in (sch.plant.events or []) if e.action == sch.action), default=None)
        run_at = _calc_next_run_utc(sch=sch, user_tz=tz, last_event_utc=last, now_utc=now_utc)
        items.append({
            "schedule_id": sch.id,
            "dt_utc": run_at,
            "plant_id": sch.plant.id,
            "plant_name": sch.plant.name,
            "action": sch.action,
        })

    items.sort(key=lambda x: x["dt_utc"])
    return items[:limit]

# ---------- –ø—É–±–ª–∏—á–Ω—ã–π –≤—Ö–æ–¥ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ----------
async def show_quick_done_menu(target: types.Message | types.CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´‚úÖ¬ª.
    """
    if isinstance(target, types.CallbackQuery):
        message = target.message
        user_id = target.from_user.id
    else:
        message = target
        user_id = target.from_user.id

    items = await _collect_upcoming_for_user(user_id)

    if not items:
        kb = InlineKeyboardBuilder()
        kb.row(
            types.InlineKeyboardButton(text="üóìÔ∏è –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="cal:plan:upc:1:all:0"),
            types.InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é", callback_data="menu:root"),
        )
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.\n–°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –¥–µ–π—Å—Ç–≤–∏—è."
        if isinstance(target, types.CallbackQuery):
            await message.edit_text(text, reply_markup=kb.as_markup())
            await target.answer()
        else:
            await message.answer(text, reply_markup=kb.as_markup())
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    lines = ["‚úÖ <b>–û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</b>", "–ë–ª–∏–∂–∞–π—à–∏–µ –∑–∞–¥–∞—á–∏:"]
    kb = InlineKeyboardBuilder()

    for idx, it in enumerate(items, start=1):
        emoji = ACTION_EMOJI.get(it["action"], "‚Ä¢")
        # –ø–æ–∫–∞–∂–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ª–æ–∫–∞–ª—å –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (—É –≤—Å–µ—Ö –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ user); —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∞—Ç—å –ª–∏—à–Ω–∏–π –∑–∞–ø—Ä–æ—Å, —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ UTC —Å –ø–æ–º–µ—Ç–∫–æ–π
        # –ª—É—á—à–µ –≤—Å–µ–≥–æ ‚Äî —Ö—Ä–∞–Ω–∏—Ç—å tz –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ items, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Ç–æ–±—Ä–∞–∑–∏–º HH:MM UTC
        t_str = it["dt_utc"].strftime("%H:%M")
        lines.append(f"{idx:>2}. {t_str} {emoji} {it['plant_name']} (id:{it['plant_id']})")
        # –ö–Ω–æ–ø–∫–∞ ¬´‚úÖ¬ª –¥–ª—è —ç—Ç–æ–≥–æ –ø—É–Ω–∫—Ç–∞
        kb.row(
            types.InlineKeyboardButton(
                text=f"‚úÖ {idx}. –û—Ç–º–µ—Ç–∏—Ç—å",
                callback_data=f"{PREFIX}:done:{it['schedule_id']}"
            )
        )

    # –Ω–∏–∑ —ç–∫—Ä–∞–Ω–∞
    kb.row(
        types.InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"{PREFIX}:refresh"),
        types.InlineKeyboardButton(text="‚Ü©Ô∏è –ú–µ–Ω—é", callback_data="menu:root"),
    )

    text = "\n".join(lines)
    if isinstance(target, types.CallbackQuery):
        await message.edit_text(text, reply_markup=kb.as_markup())
        await target.answer()
    else:
        await message.answer(text, reply_markup=kb.as_markup())

# ---------- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–ª–±—ç–∫–æ–≤ ----------
@router.callback_query(F.data.startswith(f"{PREFIX}:"))
async def on_quick_done_callbacks(cb: types.CallbackQuery):
    parts = cb.data.split(":")
    action = parts[1] if len(parts) > 1 else "noop"

    if action == "noop":
        return await cb.answer()

    if action == "refresh":
        return await show_quick_done_menu(cb)

    if action == "done":
        # qdone:done:<schedule_id>
        try:
            schedule_id = int(parts[2])
        except Exception:
            return await cb.answer("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å", show_alert=True)

        # –ù–∞–π–¥—ë–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–¥–∏–º —Å–æ–±—ã—Ç–∏–µ –ø–æ –µ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—é/–¥–µ–π—Å—Ç–≤–∏—é
        async with AsyncSessionLocal() as session:
            sch: Schedule | None = await session.get(
                Schedule,
                schedule_id,
                options=(
                    selectinload(Schedule.plant),
                ),
            )
            if not sch:
                await cb.answer("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
                return await show_quick_done_menu(cb)

        async with new_uow() as uow:
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º manual Event
            await uow.events.create(plant_id=sch.plant.id, action=sch.action, source="manual")

        # –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —ç—Ç–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
        await plan_next_for_schedule(cb.bot, schedule_id)

        await cb.answer("–û—Ç–º–µ—á–µ–Ω–æ ‚úÖ", show_alert=False)
        return await show_quick_done_menu(cb)

    # fallback
    await cb.answer()