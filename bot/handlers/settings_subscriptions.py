# bot/handlers/settings_subscriptions.py
from __future__ import annotations

from typing import List
from datetime import datetime, timezone

from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from bot.db_repo.unit_of_work import new_uow
from bot.db_repo.models import ShareMemberStatus

settings_router = Router(name="settings_subscriptions")

PREFIX = "settings"
PAGE_SIZE = 7


# ---------- Keyboards ----------
def kb_settings_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîó –í–≤–µ—Å—Ç–∏ –∫–æ–¥", callback_data=f"{PREFIX}:subs_enter_code")
    kb.button(text="üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data=f"{PREFIX}:subs_list:1")
    kb.button(text="üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="settings:subs_cal")
    kb.button(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"{PREFIX}:menu")
    kb.adjust(1)
    return kb.as_markup()


def kb_enter_code():
    kb = InlineKeyboardBuilder()
    kb.button(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"{PREFIX}:subs_enter_cancel")
    kb.adjust(1)
    return kb.as_markup()


def _slice(items: list, page: int, size: int = PAGE_SIZE):
    total = len(items)
    pages = max(1, (total + size - 1) // size)
    page = max(1, min(page, pages))
    s, e = (page - 1) * size, (page - 1) * size + size
    return items[s:e], page, pages, total


def kb_subs_list_page(member_ids: List[int], page: int, pages: int):
    kb = InlineKeyboardBuilder()
    for mid in member_ids:
        kb.row(
            types.InlineKeyboardButton(
                text=f"üìå –ü–æ–¥–ø–∏—Å–∫–∞ #{mid}",
                callback_data=f"{PREFIX}:subs_item:{mid}:{page}",
            )
        )
    nav = []
    if page > 1:
        nav.append(types.InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{PREFIX}:subs_list:{page - 1}"))
    nav.append(types.InlineKeyboardButton(text=f"{page}/{pages}", callback_data=f"{PREFIX}:noop"))
    if page < pages:
        nav.append(types.InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{PREFIX}:subs_list:{page + 1}"))
    if nav:
        kb.row(*nav)
    kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{PREFIX}:menu"))
    return kb.as_markup()


def kb_sub_item(member_id: int, return_page: int):
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(
            text="‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data=f"{PREFIX}:subs_unsub_confirm:{member_id}:{return_page}",
        )
    )
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data=f"{PREFIX}:subs_list:{return_page}"))
    kb.row(types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"{PREFIX}:menu"))
    return kb.as_markup()


def kb_unsub_confirm(member_id: int, return_page: int):
    kb = InlineKeyboardBuilder()
    kb.row(
        types.InlineKeyboardButton(
            text="‚úÖ –î–∞, –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è",
            callback_data=f"{PREFIX}:subs_unsub:{member_id}:{return_page}",
        )
    )
    kb.row(types.InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data=f"{PREFIX}:subs_item:{member_id}:{return_page}"))
    return kb.as_markup()


# ---------- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ----------
@settings_router.callback_query(F.data == f"{PREFIX}:subs")
async def on_subs_menu(cb: types.CallbackQuery):
    text = (
        "üì¨ <b>–ü–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "‚Äî –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —á—É–∂–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"
    )
    await cb.message.edit_text(text, reply_markup=kb_settings_menu())
    await cb.answer()


# ---------- –í–≤–æ–¥ –∫–æ–¥–∞ ----------
try:
    from bot.handlers.settings_inline import SettingsStates  # type: ignore
except Exception:
    from aiogram.fsm.state import StatesGroup, State
    class SettingsStates(StatesGroup):
        waiting_sub_code = State()


@settings_router.callback_query(F.data == f"{PREFIX}:subs_enter_code")
async def on_subs_enter_code_start(cb: types.CallbackQuery, state: FSMContext):
    await state.set_state(SettingsStates.waiting_sub_code)
    await cb.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, —Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω):",
        reply_markup=kb_enter_code(),
    )
    await cb.answer()


@settings_router.callback_query(F.data == f"{PREFIX}:subs_enter_cancel")
async def on_subs_enter_code_cancel(cb: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await on_subs_menu(cb)
    await cb.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")


@settings_router.message(SettingsStates.waiting_sub_code)
async def on_subs_enter_code_message(msg: types.Message, state: FSMContext):
    code = (msg.text or "").strip().replace(" ", "").upper()
    if not code:
        await msg.answer("–ü—É—Å—Ç–æ–π –∫–æ–¥. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Ç—Ä–æ–∫—É —Å –∫–æ–¥–æ–º –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–û—Ç–º–µ–Ω–∞¬ª.", reply_markup=kb_enter_code())
        return

    user_id = msg.from_user.id
    async with new_uow() as uow:
        # –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏–Ω–∫ –ø–æ –∫–æ–¥—É
        link = await uow.share_links.get_by_code_active(code, now_utc=datetime.now(timezone.utc))
        if not link:
            await msg.answer("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å—Ç—ë–∫ –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", reply_markup=kb_enter_code())
            return

        # —É–∂–µ –µ—Å—Ç—å —á–ª–µ–Ω—Å—Ç–≤–æ?
        member = await uow.share_members.find(share_id=link.id, subscriber_user_id=user_id)

        if member and member.status == ShareMemberStatus.ACTIVE:
            await state.clear()
            await msg.answer("–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –ø–æ —ç—Ç–æ–º—É –∫–æ–¥—É. –û—Ç–∫—Ä–æ—é —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫‚Ä¶")
            fake_cb = types.CallbackQuery(id="0", from_user=msg.from_user, chat_instance="", message=msg, data=f"{PREFIX}:subs_list:1")
            await on_subs_list(fake_cb)
            return

        # —Å–æ–∑–¥–∞—ë–º/–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º
        if member:
            await uow.share_members.set_status(member_id=member.id, status=ShareMemberStatus.ACTIVE)
        else:
            await uow.share_members.create(share_id=link.id, subscriber_user_id=user_id)

        # —É—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ (max_uses)
        await uow.share_links.increment_uses(link.id)
        await uow.commit()

    await state.clear()
    await msg.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –ü–æ–∫–∞–∂—É –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏‚Ä¶")
    fake_cb = types.CallbackQuery(id="0", from_user=msg.from_user, chat_instance="", message=msg, data=f"{PREFIX}:subs_list:1")
    await on_subs_list(fake_cb)


@settings_router.callback_query(F.data.startswith(f"{PREFIX}:subs_list:"))
async def on_subs_list(cb: types.CallbackQuery):
    try:
        page = int(cb.data.split(":")[-1])
    except Exception:
        page = 1

    user_id = cb.from_user.id
    async with new_uow() as uow:
        members = await uow.share_members.list_by_user(user_id)

    items, page, pages, total = _slice(list(members), page, PAGE_SIZE)
    if total == 0:
        await cb.message.edit_text(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏.",
            reply_markup=kb_settings_menu(),
        )
        await cb.answer()
        return

    # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Å—ã–ª–æ–∫
    async with new_uow() as uow:
        titles: List[str] = []
        for m in items:
            share = await uow.share_links.get(m.share_id)
            title = getattr(share, "title", None) or f"–ü–æ–¥–ø–∏—Å–∫–∞ #{m.id}"
            status = getattr(m, "status", "UNKNOWN")
            titles.append(f"‚Ä¢ <b>{title}</b> ‚Äî {status}")

    text = "üìã <b>–ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏</b>:\n\n" + "\n".join(titles)
    await cb.message.edit_text(text, reply_markup=kb_subs_list_page([m.id for m in items], page, pages))
    await cb.answer()


# ---------- –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ----------
@settings_router.callback_query(F.data.startswith(f"{PREFIX}:subs_item:"))
async def on_subs_item(cb: types.CallbackQuery):
    _, _, _, member_id_str, return_page_str = cb.data.split(":")
    member_id = int(member_id_str)
    return_page = int(return_page_str)

    async with new_uow() as uow:
        m = await uow.share_members.get_with_relations(member_id)
        if not m:
            await cb.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            cb2 = types.CallbackQuery(id=cb.id, from_user=cb.from_user, chat_instance=cb.chat_instance, message=cb.message, data=f"{PREFIX}:subs_list:{return_page}")
            await on_subs_list(cb2)
            return

        share = m.share
        title = getattr(share, "title", None) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        allow = "–æ—Ç–º–µ—á–∞—Ç—å –º–æ–∂–Ω–æ" if share.allow_complete_default else "–æ—Ç–º–µ—á–∞—Ç—å –Ω–µ–ª—å–∑—è"
        hist = "–∏—Å—Ç–æ—Ä–∏—è –≤–∏–¥–Ω–∞" if share.show_history_default else "–∏—Å—Ç–æ—Ä–∏—è —Å–∫—Ä—ã—Ç–∞"

    text = (
        f"<b>{title}</b>\n"
        f"–ü—Ä–∞–≤–∞: {allow}, {hist}\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
    )
    await cb.message.edit_text(text, reply_markup=kb_sub_item(m.id, return_page))
    await cb.answer()


# ---------- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏ ----------
@settings_router.callback_query(F.data.startswith(f"{PREFIX}:subs_unsub_confirm:"))
async def on_subs_unsub_confirm(cb: types.CallbackQuery):
    _, _, _, member_id_str, return_page_str = cb.data.split(":")
    member_id = int(member_id_str)
    return_page = int(return_page_str)

    async with new_uow() as uow:
        m = await uow.share_members.get_with_relations(member_id)
        if not m:
            await cb.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        share = m.share
        title = getattr(share, "title", None) or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    await cb.message.edit_text(f"–¢–æ—á–Ω–æ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç ¬´{title}¬ª?", reply_markup=kb_unsub_confirm(member_id, return_page))
    await cb.answer()


# ---------- –û—Ç–ø–∏—Å–∫–∞ ----------
@settings_router.callback_query(F.data.startswith(f"{PREFIX}:subs_unsub:"))
async def on_subs_unsub(cb: types.CallbackQuery):
    _, _, _, member_id_str, return_page_str = cb.data.split(":")
    member_id = int(member_id_str)
    return_page = int(return_page_str)

    async with new_uow() as uow:
        m = await uow.share_members.get(member_id)
        if not m:
            await cb.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        await uow.share_members.set_status(member_id=m.id, status=ShareMemberStatus.REMOVED)
        await uow.commit()

    await cb.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    cb2 = types.CallbackQuery(id=cb.id, from_user=cb.from_user, chat_instance=cb.chat_instance, message=cb.message, data=f"{PREFIX}:subs_list:{return_page}")
    await on_subs_list(cb2)


# ---------- No-op ----------
@settings_router.callback_query(F.data == f"{PREFIX}:noop")
async def on_noop(cb: types.CallbackQuery):
    await cb.answer()