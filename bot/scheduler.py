# bot/scheduler.py
from __future__ import annotations
from datetime import datetime
import os
import pytz
import logging

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore

from bot.db_repo.base import AsyncSessionLocal
from bot.db_repo.models import Schedule, ActionType, Event, Plant, User, ScheduleType
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from bot.services.rules import next_by_interval, next_by_weekly
from bot.config import settings  # –Ω—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# --- –õ–æ–≥–≥–µ—Ä ---
logger = logging.getLogger(__name__)

# --- JobStore: –ù–£–ñ–ï–ù —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π URL (psycopg), –Ω–µ asyncpg ---
SYNC_DB_URL = (
    os.getenv("DATABASE_URL_SYNC")
    or os.getenv("DATABASE_URL", "postgresql+asyncpg://bot:bot@db:5432/watering").replace("+asyncpg", "")
)

jobstores = {
    "default": SQLAlchemyJobStore(url=SYNC_DB_URL, tablename="apscheduler_jobs"),
}
scheduler = AsyncIOScheduler(jobstores=jobstores)

# ==========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï
# ==========================
ACTION_EMOJI = {
    ActionType.WATERING: "üíß",
    ActionType.FERTILIZING: "üíä",
    ActionType.REPOTTING: "ü™¥",
}

def _job_id(schedule_id: int) -> str:
    return f"sch:{schedule_id}"  # —É–Ω–∏–∫–∞–ª—å–Ω–æ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ

# ==========================
# –ó–ê–î–ê–ù–ò–ï: –û–¢–ü–†–ê–í–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï
# ==========================
async def send_reminder(schedule_id: int):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è APScheduler-–æ–º –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    –í–ù–ò–ú–ê–ù–ò–ï: –Ω–∏–∫–∞–∫–∏—Ö –∂–∏–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –≤ args! Bot —Å–æ–∑–¥–∞—ë–º –ª–æ–∫–∞–ª—å–Ω–æ.
    """
    logger.info(f"[JOB START] schedule_id={schedule_id}")

    bot = Bot(token=settings.BOT_TOKEN)
    try:
        async with AsyncSessionLocal() as session:
            sch: Schedule | None = await session.get(
                Schedule,
                schedule_id,
                options=(selectinload(Schedule.plant).selectinload(Plant.user),),
            )
            if not sch or not sch.active:
                logger.warning(f"[JOB SKIP] schedule_id={schedule_id} inactive or missing")
                return

            user: User = sch.plant.user
            plant: Plant = sch.plant

            # 1) –æ—Ç–ø—Ä–∞–≤–∫–∞
            emoji = ACTION_EMOJI.get(sch.action, "‚Ä¢")
            action_text = {
                ActionType.WATERING: "–í—Ä–µ–º—è –ø–æ–ª–∏–≤–∞",
                ActionType.FERTILIZING: "–í—Ä–µ–º—è —É–¥–æ–±—Ä–∏—Ç—å",
                ActionType.REPOTTING: "–í—Ä–µ–º—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏",
            }[sch.action]
            try:
                await bot.send_message(user.tg_user_id, f"{emoji} {action_text}: {plant.name}")
                logger.info(f"[SEND OK] user_id={user.id} plant_id={plant.id} action={sch.action}")
            except Exception as e:
                logger.exception(f"[SEND ERR] schedule_id={schedule_id}: {e}")

            # 2) –ª–æ–≥ –∞–≤—Ç–æ-—Å–æ–±—ã—Ç–∏—è
            ev = Event(plant_id=plant.id, action=sch.action, source="auto")
            session.add(ev)
            await session.commit()
            logger.debug(f"[EVENT LOGGED] event_id={ev.id} schedule_id={schedule_id}")
    finally:
        # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º http-—Å–µ—Å—Å–∏—é aiogram-–±–æ—Ç–∞
        await bot.session.close()

    # 3) –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    await plan_next_for_schedule(schedule_id)

# ==========================
# –†–ê–°–ß–Å–¢ –°–õ–ï–î–£–Æ–©–ï–ì–û –í–†–ï–ú–ï–ù–ò
# ==========================
def _is_interval_type(t) -> bool:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
    –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∏ —Å—Ç—Ä–æ–∫–∏ ("interval"/"weekly"), –∏ Enum ScheduleType.
    """
    if t == ScheduleType.INTERVAL:
        return True
    if t == ScheduleType.WEEKLY:
        return False
    # –µ—Å–ª–∏ –≤ –ë–î –æ—Å—Ç–∞–ª–∏—Å—å —Å—Ç–∞—Ä—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if isinstance(t, str):
        return t == "interval"
    # –µ—Å–ª–∏ Enum, –Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ value –≤–∞–∂–Ω–æ
    if hasattr(t, "value"):
        return t.value == "interval"
    return False  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–µ interval

def _calc_next_run_utc(*, sch: Schedule, user_tz: str, last_event_utc: datetime | None, now_utc: datetime) -> datetime:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ (UTC) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–µ —Ä–∞–Ω—å—à–µ now_utc.
    """
    if _is_interval_type(sch.type):
        return next_by_interval(last_event_utc, sch.interval_days, sch.local_time, user_tz, now_utc)
    else:
        return next_by_weekly(last_event_utc, sch.weekly_mask, sch.local_time, user_tz, now_utc)

# ==========================
# –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –û–î–ù–û–ì–û –†–ê–°–ü–ò–°–ê–ù–ò–Ø
# ==========================
async def plan_next_for_schedule(schedule_id: int):
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏ (–ø–µ—Ä–µ)—Å–æ–∑–¥–∞—Ç—å job –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Schedule.
    """
    async with AsyncSessionLocal() as session:
        sch: Schedule | None = await session.get(
            Schedule,
            schedule_id,
            options=(
                selectinload(Schedule.plant).selectinload(Plant.user),
                selectinload(Schedule.plant).selectinload(Plant.events),
            ),
        )
        if not sch or not sch.active:
            # —É–¥–∞–ª–∏—Ç—å –¥–∂–æ–±, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
            try:
                scheduler.remove_job(_job_id(schedule_id))
                logger.info(f"[JOB REMOVED] schedule_id={schedule_id}")
            except Exception:
                pass
            return

        user = sch.plant.user
        tz = user.tz
        now_utc = datetime.now(tz=pytz.UTC)

        # –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é (–¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è)
        last = max(
            (e.done_at_utc for e in (sch.plant.events or []) if e.action == sch.action),
            default=None
        )

        run_at = _calc_next_run_utc(sch=sch, user_tz=tz, last_event_utc=last, now_utc=now_utc)
        logger.info(
            f"[PLAN] schedule_id={schedule_id} user_id={user.id} plant_id={sch.plant.id} "
            f"action={sch.action} run_at_utc={run_at.isoformat()}"
        )

    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º job
    job_id = _job_id(schedule_id)
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass

    scheduler.add_job(
        send_reminder,
        trigger="date",
        id=job_id,
        run_date=run_at,
        args=[schedule_id],          # —Ç–æ–ª—å–∫–æ –ø—Ä–∏–º–∏—Ç–∏–≤
        replace_existing=True,
        misfire_grace_time=3600,     # 1 —á–∞—Å –Ω–∞ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ
        coalesce=True,
        max_instances=1,
    )

# ==========================
# –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –í–°–ï–• –ê–ö–¢–ò–í–ù–´–•
# ==========================
async def plan_all_active():
    """
    –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö job.
    –í—ã–∑—ã–≤–∞–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    """
    async with AsyncSessionLocal() as session:
        q = (
            select(Schedule)
            .where(Schedule.active.is_(True))
            .options(
                selectinload(Schedule.plant).selectinload(Plant.user),
                selectinload(Schedule.plant).selectinload(Plant.events),
            )
        )
        schedules = (await session.execute(q)).scalars().all()

    logger.info(f"[PLAN ALL] active_schedules={len(schedules)}")
    for sch in schedules:
        await plan_next_for_schedule(sch.id)

# ==========================
# –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ==========================
def start_scheduler():
    """
    –ó–∞–ø—É—Å–∫ APScheduler (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).
    """
    if not scheduler.running:
        scheduler.start()
        logger.info("[SCHEDULER STARTED]")