# bot/scheduler.py
from __future__ import annotations
from datetime import datetime
import os
import pytz

from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore

from bot.db_repo.base import AsyncSessionLocal
from bot.db_repo.models import Schedule, ActionType, Event, Plant, User
from bot.db_repo.unit_of_work import new_uow
from sqlalchemy import select
from sqlalchemy.orm import selectinload

from bot.services.rules import next_by_interval, next_by_weekly

# --- JobStore: –ù–£–ñ–ï–ù —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π URL (psycopg), –Ω–µ asyncpg ---
SYNC_DB_URL = (
    os.getenv("DATABASE_URL_SYNC")
    or os.getenv("DATABASE_URL", "postgresql+asyncpg://bot:bot@db:5432/watering").replace("+asyncpg", "")
)

jobstores = {
    "default": SQLAlchemyJobStore(url=SYNC_DB_URL, tablename="apscheduler_jobs"),
}
scheduler = AsyncIOScheduler(jobstores=jobstores)


# ==========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï
# ==========================
ACTION_EMOJI = {
    ActionType.WATERING: "üíß",
    ActionType.FERTILIZING: "üíä",
    ActionType.REPOTTING: "ü™¥",
}

def _job_id(schedule_id: int) -> str:
    return f"sch:{schedule_id}"  # —É–Ω–∏–∫–∞–ª—å–Ω–æ –Ω–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ


# ==========================
# –ó–ê–î–ê–ù–ò–ï: –û–¢–ü–†–ê–í–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï
# ==========================
async def send_reminder(bot: Bot, schedule_id: int):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è APScheduler-–æ–º –≤ –Ω—É–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–∏—à–µ—Ç auto Event (–Ω–µ —Å–¥–≤–∏–≥–∞–µ—Ç –≤—Ä—É—á–Ω—É—é –≥—Ä–∞—Ñ–∏–∫ ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞—Å—Å—á–∏—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ).
    """
    # –ü–æ–¥—Ç—è–Ω–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ schedule_id
    async with AsyncSessionLocal() as session:
        sch: Schedule | None = await session.get(
            Schedule,
            schedule_id,
            options=(
                selectinload(Schedule.plant)
                .selectinload(Plant.user),
            ),
        )
        if not sch or not sch.active:
            return  # —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ

        user: User = sch.plant.user
        plant: Plant = sch.plant

        # 1) –æ—Ç–ø—Ä–∞–≤–∫–∞
        emoji = ACTION_EMOJI.get(sch.action, "‚Ä¢")
        action_text = {
            ActionType.WATERING: "–í—Ä–µ–º—è –ø–æ–ª–∏–≤–∞",
            ActionType.FERTILIZING: "–í—Ä–µ–º—è —É–¥–æ–±—Ä–∏—Ç—å",
            ActionType.REPOTTING: "–í—Ä–µ–º—è –ø–µ—Ä–µ—Å–∞–¥–∫–∏",
        }[sch.action]
        await bot.send_message(user.tg_user_id, f"{emoji} {action_text}: {plant.name}")

        # 2) –ª–æ–≥ –∞–≤—Ç–æ-—Å–æ–±—ã—Ç–∏—è
        ev = Event(plant_id=plant.id, action=sch.action, source="auto")
        session.add(ev)
        await session.commit()

    # 3) –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ ‚Äî –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–µ–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ
    await plan_next_for_schedule(bot, schedule_id)


# ==========================
# –†–ê–°–ß–Å–¢ –°–õ–ï–î–£–Æ–©–ï–ì–û –í–†–ï–ú–ï–ù–ò
# ==========================
def _calc_next_run_utc(*, sch: Schedule, user_tz: str, last_event_utc: datetime | None, now_utc: datetime) -> datetime:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à–µ–µ –Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ (UTC) –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, –Ω–µ —Ä–∞–Ω—å—à–µ now_utc.
    """
    if sch.type == "interval":
        return next_by_interval(last_event_utc, sch.interval_days, sch.local_time, user_tz, now_utc)
    else:
        return next_by_weekly(last_event_utc, sch.weekly_mask, sch.local_time, user_tz, now_utc)


# ==========================
# –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –û–î–ù–û–ì–û –†–ê–°–ü–ò–°–ê–ù–ò–Ø
# ==========================
async def plan_next_for_schedule(bot: Bot, schedule_id: int):
    """
    –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –∏ (–ø–µ—Ä–µ)—Å–æ–∑–¥–∞—Ç—å job –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Schedule.
    """
    async with AsyncSessionLocal() as session:
        sch: Schedule | None = await session.get(
            Schedule,
            schedule_id,
            options=(
                selectinload(Schedule.plant)
                .selectinload(Plant.user),
                selectinload(Schedule.plant).selectinload(Plant.events),
            ),
        )
        if not sch or not sch.active:
            # —É–¥–∞–ª–∏—Ç—å –¥–∂–æ–±, –µ—Å–ª–∏ –æ–Ω –æ—Å—Ç–∞–ª—Å—è
            try:
                scheduler.remove_job(_job_id(schedule_id))
            except Exception:
                pass
            return

        user = sch.plant.user
        tz = user.tz
        now_utc = datetime.now(tz=pytz.UTC)

        # –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–º—É –¥–µ–π—Å—Ç–≤–∏—é (–¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è)
        last = max(
            (e.done_at_utc for e in (sch.plant.events or []) if e.action == sch.action),
            default=None
        )

        run_at = _calc_next_run_utc(sch=sch, user_tz=tz, last_event_utc=last, now_utc=now_utc)

    # –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º job
    job_id = _job_id(schedule_id)
    try:
        scheduler.remove_job(job_id)
    except Exception:
        pass

    scheduler.add_job(
        send_reminder,
        trigger="date",
        id=job_id,
        run_date=run_at,
        args=[bot, schedule_id],
        replace_existing=True,
        misfire_grace_time=3600,   # 1 —á–∞—Å –Ω–∞ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ
        coalesce=True,
        max_instances=1,
    )


# ==========================
# –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –î–õ–Ø –í–°–ï–• –ê–ö–¢–ò–í–ù–´–•
# ==========================
async def plan_all_active(bot: Bot):
    """
    –ü—Ä–æ–π—Ç–∏—Å—å –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º –∏ –ø–µ—Ä–µ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö job.
    –í—ã–∑—ã–≤–∞–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
    """
    async with AsyncSessionLocal() as session:
        q = (
            select(Schedule)
            .where(Schedule.active.is_(True))
            .options(
                selectinload(Schedule.plant).selectinload(Plant.user),
                selectinload(Schedule.plant).selectinload(Plant.events),
            )
        )
        schedules = (await session.execute(q)).scalars().all()

    for sch in schedules:
        await plan_next_for_schedule(bot, sch.id)


# ==========================
# –ñ–ò–ó–ù–ï–ù–ù–´–ô –¶–ò–ö–õ –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê
# ==========================
def start_scheduler():
    """
    –ó–∞–ø—É—Å–∫ APScheduler (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è).
    """
    if not scheduler.running:
        scheduler.start()